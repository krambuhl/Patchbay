{"version":3,"file":"patchbay.min.js","sources":["_export.js","utilities.js","model.js","view.js","_after.js"],"names":[],"mappings":"CAAA,SAAA,EAAA,GACA,GAAA,kBAAA,SAAA,OAAA,IACA,QAAA,SAAA,SAAA,SAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GACA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,SAEA,IAAA,mBAAA,SAAA,CACA,GAAA,GAAA,QAAA,UAAA,EAAA,QAAA,UAAA,EAAA,QAAA,SACA,SAAA,EAAA,EAAA,QAAA,EAAA,EAAA,OAEA,GAAA,SAAA,EAAA,KAAA,EAAA,EAAA,EAAA,OAAA,EAAA,SAEA,KAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GCQA,QAAA,GAAA,EAAA,GACA,MAAA,GAAA,WAAA,GAAA,EAAA,MAAA,GAAA,EAGA,QAAA,KACA,MAAA,GAAA,KAAA,UAAA,SAAA,GACA,OAAA,EAAA,YAAA,KCzBA,MCAA,GAAA,MAAA,WACA,GAAA,GAAA,EAAA,YAAA,QAWA,OANA,GAAA,OAAA,SAAA,EAAA,EAAA,GACA,EAAA,OAAA,GAAA,KAAA,GACA,IAAA,GAAA,KAAA,OAAA,EACA,OAAA,IAAA,GAAA,EAAA,UAAA,EAAA,KAGA,KCXA,EAAA,KAAA,WAGA,GAAA,IAAA,KAAA,KAAA,WAAA,QAAA,QAKA,EAAA,EAAA,YAAA,QAiHA,OA/GA,GAAA,UAAA,gBAAA,WACA,GAAA,GAAA,IAEA,GAAA,YAAA,UAAA,gBAAA,MAAA,KAAA,WAGA,EAAA,OAAA,KAAA,EAAA,KAAA,KAAA,QAAA,IAGA,KAAA,SAAA,KAAA,MAAA,KAAA,MAGA,KAAA,WAAA,EAAA,KAAA,KAGA,KAAA,OAAA,KAAA,OAEA,EAAA,MAAA,WAEA,EAAA,MAAA,EAAA,EAAA,KAKA,EAAA,KAAA,QAAA,UACA,EAAA,MAAA,EAAA,SACA,EAAA,KAAA,SACA,EAAA,KAAA,QAAA,YAIA,EAAA,UAAA,SAAA,SAAA,EAAA,GACA,EAAA,EAAA,MAEA,EACA,YAAA,GAAA,OACA,KAAA,MAAA,EACA,KAAA,MAAA,IAAA,IACA,kBAAA,IAAA,EAAA,OACA,KAAA,MAAA,EAAA,OAAA,GACA,gBAAA,KACA,KAAA,MAAA,EAAA,MAAA,OAAA,IAGA,KAAA,MAAA,EAAA,MAAA,OAAA,IAKA,EAAA,UAAA,WAAA,SAAA,GACA,GAAA,GAAA,IACA,IACA,KAAA,IAAA,EAAA,GAAA,GAAA,GACA,KAAA,GAAA,KAAA,IAAA,GACA,KAAA,EAAA,SAAA,GACA,MAAA,GAAA,IAAA,KAAA,KAGA,KAAA,WAAA,SAAA,cAAA,SAIA,EAAA,UAAA,MAAA,SAAA,GAEA,KAAA,GAAA,EAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAEA,MADA,GAAA,GAAA,KAAA,EAAA,GACA,MACA,OAKA,EAAA,UAAA,OAAA,EAAA,KAAA,SAAA,SAAA,EAAA,GACA,EAAA,YAAA,EAAA,KAAA,GAAA,MAIA,EAAA,WAAA,GACA,KAAA,WAAA,EAAA,EAAA,EAAA,WACA,EAAA,SAAA,IACA,KAAA,WAAA,EAAA,SAAA,EAAA,EAAA,EAAA,cAIA,EAAA,UAAA,MAAA,SAAA,EAAA,GACA,MAAA,GAAA,YAAA,GACA,KAAA,IAAA,SAAA,MAAA,QAEA,EACA,KAAA,IAAA,SAAA,MAAA,GAEA,KAAA,IAAA,YAAA,MAAA,KAOA,EAAA,UAAA,MAAA,EAAA,KAMA,EAAA,UAAA,QAAA,WACA,EAAA,YAAA,UAAA,QAAA,MAAA,KAAA,WAGA,KAAA,MAAA,WAGA,KF1HA","sourcesContent":["(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['lodash', 'jquery', 'struck', 'exports'], function(_, $, Struck, exports) {\n      root.Patchbay = factory(root, exports, _, $, Struck);\n    });\n  } else if (typeof exports !== 'undefined') {\n    var _ = require('lodash'), $ = require('jquery'), Struck = require('struck');\n    exports = factory(root, exports, _, $, Struck);\n  } else {\n    root.Patchbay = factory(root, {}, root._, root.jQuery, root.Struck);\n  }\n}(this, function(root, Patchbay, _, $, Struck) {","// ###Utilities\nfunction capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n// #####splitName\n// split \"event1 event2\" into an\n// array of event names\nfunction splitName(names, context) {\n  // get result of name if defined as a function\n  var events = result(names, context);\n\n  // split by spaces if result isn't an array\n  // always returns an array\n  return _.isArray(events) ? events : events && events.split(' ');\n}\n\n// #####result\n// returns get result of an expression\nfunction result(expr, context) {\n  return _.isFunction(expr) ? expr.apply(context) : expr;\n}\n\nfunction firstDef() {\n  return _.find(arguments, function(arg) { \n    return !_.isUndefined(arg);\n  });\n}","Patchbay.Model = (function() {\n\tvar Model = Struck.EventObject.extend();\n\n  // ###create\n  // prefered method of creating new objects\n  // over using the `new` style\n  Model.create = function(data, props, opts) {\n    _.extend(props, { data: data });\n    var Creator = this.extend(props);\n    return new Creator(_.extend({}, props, opts));\n  };\n\n\treturn Model;\n})();","// ##View\nPatchbay.View = (function() {\n  // array of options that will be extended\n  // to the view when initialized\n  var viewOptions = ['el', 'ui', 'template', 'model', 'data'];\n\n  // `View` constructor returns a View object\n  // that contains methods for template/model\n  // rendering, dom caching, and event listening.\n  var View = Struck.EventObject.extend();\n\n  View.prototype.baseConstructor = function() {\n    var self = this;\n    \n    Struck.EventObject.prototype.baseConstructor.apply(this, arguments);\n\n    // extend selected instance opitions to object\n    _.extend(this, _.pick(this.options, viewOptions));\n\n    // gets model\n    this.setModel(this.model, this.data);\n\n    // setup view elements\n    this.setElement(result(this.el));\n\n    // render template with model if defined\n    this.render(this.model);\n\n    _.defer(function() {\n      // cache jquery elements\n      self.setUI(result(self.ui));\n\n      // run setup function\n      // calling hooks inline so overwriting\n      // setup function still gets hooked (feels iffy)\n      self.hook('setup', 'before');\n      self.setup(self.options);\n      self.hook('setup');\n      self.hook('setup', 'after');\n    });\n  };\n\n  View.prototype.setModel = function(model, data) {\n    data = firstDef(data, {});\n\n    if (model) {\n      if (model instanceof Patchbay.Model) {\n        this.model = model;\n        this.model.set(data);\n      } else if (typeof model === 'function' && !!model.create) {\n        this.model = model.create(data);\n      } else if (typeof model === 'object') {\n        this.model = Patchbay.Model.create(model);\n      }\n    } else {\n      this.model = Patchbay.Model.create(data);\n    }\n  };\n\n  // caches the dom object and creates scoped find function\n  View.prototype.setElement = function(el) {\n    var self = this;\n    if (el) {\n      this.$el = $(el).eq(0);\n      this.el = this.$el[0];\n      this.$ = function(el) {\n        return self.$el.find(el);\n      };\n    } else {\n      this.setElement(document.createElement('div'));\n    }\n  };\n\n  View.prototype.setUI = function(ui) {\n    // cache dom objects from UI object\n    this.ui = _.reduce(ui, function(result, selector, name) {\n      result[name] = this.$(selector);\n      return result;\n    }, {}, this);\n  };\n\n  // `render` function that runs\n  // template function with model data\n  View.prototype.render = Struck.hook('render', function(template, model) {\n    if(_.isUndefined(firstDef(this.el, template))) { \n      return; \n    }\n\n    if (_.isFunction(template)) {\n      this.setElement(template(firstDef(model.data, {})));\n    } else if (_.isString(template)) {\n      this.setElement(_.template(template, firstDef(model.data, {})));\n    }\n  });\n\n  View.prototype.state = function(prop, active) {\n    if (_.isUndefined(active)) {\n      return this.$el.hasClass(\"is-\" + prop);\n    } else {\n      if (active) {\n        this.$el.addClass(\"is-\" + prop);\n      } else {\n        this.$el.removeClass(\"is-\" + prop);\n      }\n    }\n  };\n\n  // overwritable `setup` function\n  // called when View is initialized\n  View.prototype.setup = _.noop;\n\n  // overwritable `destroys` function\n  // that should be called when removing\n  // a view to remove event listeners\n  // or any possible memory leaks\n  View.prototype.destroy = function() {\n    Struck.EventObject.prototype.destroy.apply(this, arguments);\n    \n    // destroy model from view\n    this.model.destroy();\n  };\n\n  return View;\n})();","  return Patchbay;\n}));\n"],"sourceRoot":"/source/"}